{"version":3,"file":"static/js/377.792e168a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","redux/contact/selectors.js","components/ContactList/ContactList.jsx","components/Section/Section.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContacts } from 'redux/contact/operations';\nimport { Input, Box, FormLabel, Button } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n  const [name, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onInputChange = e => {\n    const fieldName = e.currentTarget.name;\n    const fieldValue = e.currentTarget.value;\n\n    if (fieldName === 'name') {\n      setContactName(fieldValue);\n    }\n    if (fieldName === 'number') {\n      setNumber(fieldValue);\n    }\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (contacts.items.length > 0) {\n      const contactsInPhonebook = [];\n      contacts.items.forEach(({ name }) =>\n        contactsInPhonebook.push(name.toLowerCase())\n      );\n      if (contactsInPhonebook.includes(name.toLowerCase())) {\n        Notify.warning(`${name}is already in contacts.`);\n        form.reset();\n        return;\n      }\n    }\n    dispatch(addContacts({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <>\n      <Box as=\"form\" pl={4} onSubmit={onSubmit}>\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={onInputChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={onInputChange}\n          />\n        </FormLabel>\n        <Button variant=\"outline\" type=\"submit\">\n          Add contact\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nexport default ContactForm;\n","export const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.contacts.filters;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contact/operations';\nimport { selectFilter, selectContacts } from 'redux/contact/selectors';\nimport { List, ListItem, Flex, IconButton } from '@chakra-ui/react';\nimport { DeleteIcon, PhoneIcon } from '@chakra-ui/icons';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filters = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const handleDelete = id => {\n    return dispatch(deleteContact(id));\n  };\n\n  const getVisibleContacts = (contacts, filters) => {\n    if (filters === '') return contacts;\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filters?.toLowerCase());\n    });\n  };\n\n  const visibleContacts = getVisibleContacts(contacts, filters);\n\n  if (!visibleContacts) return;\n\n  return (\n    <Flex as={List} spacing={3} flexDirection=\"column\">\n      {visibleContacts.map(({ id, name, number }) => (\n        <Flex\n          as={ListItem}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          key={id}\n        >\n          <PhoneIcon color=\"green\" />\n          {name} : {number}\n          <IconButton\n            color=\"red\"\n            variant=\"outline\"\n            icon={<DeleteIcon />}\n            onClick={() => {\n              handleDelete(id);\n            }}\n          ></IconButton>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contact/selectors';\nimport { Loader } from '../Loader';\nimport { Heading, Flex } from '@chakra-ui/react';\n\nconst Section = ({ header, title, children }) => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  return (\n    <>\n      {header && (\n        <Flex justifyContent=\"center\">\n          <Heading as=\"h1\">{header}</Heading>\n        </Flex>\n      )}\n      {title &&\n        (isLoading && !error ? (\n          <Flex justifyContent=\"center\">\n            <Loader />\n          </Flex>\n        ) : (\n          <Flex justifyContent=\"center\">\n            <Heading as=\"h2\" size=\"xl\">\n              {title}\n            </Heading>\n          </Flex>\n        ))}\n\n      {children}\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  header: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { setStatusFilter } from '../../redux/contact/filtersSlice';\nimport { Input, FormLabel } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilterChange = e => {\n    dispatch(setStatusFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FormLabel>\n      Find contact by name\n      <Input type=\"name\" required onChange={handleFilterChange} />\n    </FormLabel>\n  );\n};\n\nexport default Filter;\n","// import { Container } from 'components/App.styled';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contact/operations';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Section from 'components/Section';\nimport Filter from 'components/Filter';\nimport { Grid, GridItem, Heading, Flex } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts.items);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Grid mt={4} templateColumns=\"repeat(5, 1fr)\" gap={1}>\n        <GridItem colSpan={2}>\n          <Section header=\"Phonebook\" title=\"\">\n            <ContactForm />\n          </Section>\n        </GridItem>\n        {contacts.length > 0 ? (\n          <GridItem colSpan={3}>\n            <Section header=\"\" title=\"Contacts\">\n              <Filter />\n              <ContactList />\n            </Section>\n          </GridItem>\n        ) : (\n          <GridItem colSpan={3}>\n            <Section header=\"\" title=\"Your phonebook is empty.\">\n              <Flex justifyContent=\"center\">\n                <Heading as=\"h3\">Please add contacts.</Heading>\n              </Flex>\n            </Section>\n          </GridItem>\n        )}\n      </Grid>\n    </>\n  );\n}\n"],"names":["dispatch","useDispatch","contacts","useSelector","state","useState","name","setContactName","number","setNumber","onInputChange","e","fieldName","currentTarget","fieldValue","value","as","pl","onSubmit","preventDefault","form","target","items","length","contactsInPhonebook","forEach","push","toLowerCase","includes","Notify","reset","addContacts","type","pattern","title","required","onChange","variant","selectContacts","selectIsLoading","isLoading","selectError","error","selectFilter","filters","visibleContacts","filter","contact","getVisibleContacts","List","spacing","flexDirection","map","id","ListItem","justifyContent","alignItems","color","icon","onClick","deleteContact","handleDelete","header","children","Loader","size","setStatusFilter","Contacts","useEffect","fetchContacts","Helmet","mt","templateColumns","gap","colSpan"],"sourceRoot":""}